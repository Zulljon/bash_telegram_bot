#!/bin/bash

#exec - execute command in /bin/bash, and get its result
#espeak - get voice message of text (use espeak from linux repo)
#speakru - get voice message of text on russian (use festvox-ru from linux repo)
#sayru - say in speakers on russian

source ${CORE_DIR}/config

#Array_Element="0"
#if [[ -v RAM_JSON && -n RAM_JSON ]]; then
function UPDATE_ID(){   jq -rM .result[].update_id < "${RAM_JSON}" ; }
function CHAT_ID(){     jq -rM .result[].message.chat.id < "${RAM_JSON}" ; }
function CHAT_TITLE(){  jq -rM .result[].message.chat.title < "${RAM_JSON}" ; }
function CHAT_TYPE(){   jq -rM .result[].message.chat.type < "${RAM_JSON}" ; }
function FROM_USER(){   jq -rM .result[].message.from.username < "${RAM_JSON}" ; }
function FROM_ID(){     jq -rM .result[].message.from.id < "${RAM_JSON}" ; }
function FROM_IS_BOT(){ jq -rM .result[].message.from.is_bot < "${RAM_JSON}" ; }
function MESS_NUMB(){   jq -rM .result[].message.message_id < "${RAM_JSON}" ; }
function MESS_DATE(){   jq -rM .result[].message.date < "${RAM_JSON}" ; }
function MESS_TEXT(){   jq -rM .result[].message.text < "${RAM_JSON}" ; }

# server feedback when send anything to server with curl
# must be 'true' or 'false'
function sfb_status(){    jq -rM .ok < "${SFB_JSON}" ; }
function sfb_messID(){    jq -rM .result.message_id < "${SFB_JSON}" ; }
function sfb_chatID(){    jq -rM .result.chat.id < "${SFB_JSON}" ; }
function sfb_chatISBOT(){ jq -rM .result.chat.is_bot < "${SFB_JSON}" ; }
function sfb_chatUSER(){  jq -rM .result.chat.username < "${SFB_JSON}" ; }
function sfb_fromID(){    jq -rM .result.from.id < "${SFB_JSON}" ; }
function sfb_fromUSER(){  jq -rM .result.from.username < "${SFB_JSON}" ; }
function sfb_fromTYPE(){  jq -rM .result.from.type < "${SFB_JSON}" ; }
function sfb_date(){      jq -rM .result.date < "${SFB_JSON}" ; }
function sfb_text(){      jq -rM .result.text < "${SFB_JSON}" ; }
function sfb_error(){     jq -rM .error_code < "${SFB_JSON}" ; }
function sfb_err_descr(){ jq -rM .description < "${SFB_JSON}" ; }
#else
#	echo "Json file not set!"
#fi

function parse_text(){
	MESS_TEXT > "$CMD_ARGS"
	VAR=$( awk '{print $1}' < "$CMD_ARGS" )
# find commands in message
	if [[ $( echo "$VAR" | awk '{gsub(/\/\w+/,"TRUE",$0);print $0}') == "TRUE" ]]; then
		case $VAR in
			"/espeak" )
				echo "espeak" > "$CMD_FLAG"	;;
			"/speakru")
				echo "speakru" > "$CMD_FLAG"	;;
			"/exec" )
				echo "exec" > "$CMD_FLAG"	;;
			"/sayru" )
				echo "sayru" > "$CMD_FLAG"	;;
			"/start" )
				#cat "$HELP_en"
				echo "$HELP_en" > "$CMD_ARGS"
				send_Tmess "$CMD_ARGS"
				#send_Tmess_buttons $(CHAT_ID) "$MAIN_MENU"
				;;
		esac
# if get flag, execute apropriate command
	elif [[ $(cat "$CMD_FLAG") != "" ]]; then
		case $(cat "$CMD_FLAG") in
			espeak )
				send_Tvoice "$CMD_ARGS"
				;;
			speakru )
				send_TvoiceRU "$CMD_ARGS"
				;;
			exec )
				RESULT="$( $CMD_ARGS )"
				send_Tmess "$RESULT"
				;;
			sayru )
				sayru_alsa "$CMD_ARGS"
				;;
#			start )
#				send_Tmess
#				send_Tmess_buttons $(CHAT_ID) "$MAIN_MENU" ;;
#				;;
		esac
		echo "" > "$CMD_FLAG"
# if not find any, do echo
	else
		[[ "$(CHAT_TYPE)" == "private" ]] && send_Tmess "$CMD_ARGS"
	fi
}

# Make logs
function log(){
	echo -e "[$(date +"%x %X")] $1" >> status.log
}

function send_Tmess(){
	local MESSAGE
	MESSAGE="$(cat "$1")"
	send_Tchat_action "$(CHAT_ID)" "typing"
	curl -X POST $CURL_ARGS \
		--url "${URL}/sendMessage?" \
		--form chat_id="$(CHAT_ID)" \
		--form text="${MESSAGE}" # > /dev/null 2>&1
	log "[STAT] send message with exit status ${?}"
	log "	${MESSAGE}"
}

function sayru_alsa(){
	# func wait for /path/to/file like first argument
	local VOICE_FILE
	VOICE_FILE="$TEMP_DIR/$(MESS_DATE)_$(FROM_USER)"
	text2wave -o "${VOICE_FILE}.wav" < "$1"
	play -q "${VOICE_FILE}.wav" > /dev/null 2>&1
	if [[ "$(uname -n)" == "orangepizero" ]] ; then
		mv "${VOICE_FILE}.wav" "$DEST" > /dev/null  2>&1
	else
		rm -f "${VOICE_FILE}.wav"
	fi
}

function send_Tvoice(){
	local VOICE_FILE
	VOICE_FILE="$TEMP_DIR/$(MESS_DATE)_$(FROM_USER)"
	(
		espeak -w "${VOICE_FILE}.wav" "$( cat "$1" )"
		ffmpeg -i "${VOICE_FILE}.wav" "${VOICE_FILE}.ogg" > /dev/null 2>&1
	) &
	pId=$!

	while true; do
		if [[ $(ps -o "%p" --pid "$pId" | tail -n 1) -eq "$pId" ]]; then
			send_Tchat_action "$(CHAT_ID)" "record_audio"
		else
			break
		fi
		sleep 4.5
	done

	curl $CURL_ARGS -X POST "${URL}/sendVoice?chat_id=$(CHAT_ID)&" -F "voice=@${VOICE_FILE}.ogg" # > /dev/null 2>&1
	log "[STAT] send response with exit status ${?}"
	log "	$( cat "$1" )"
	[[ $(uname -n) == "orangepizero" ]] && mv "${VOICE_FILE}.wav" "$DEST" > /dev/null 2>&1
	rm -f "${VOICE_FILE}.wav"
	rm -f "${VOICE_FILE}.ogg"
}

function send_TvoiceRU(){
	# func wait for /path/to/file like first argument
	local VOICE_FILE
	VOICE_FILE="$TEMP_DIR/$(MESS_DATE)_$(FROM_USER)"
	send_Tchat_action "$(CHAT_ID)" "record_audio"
	text2wave -o "${VOICE_FILE}.wav" < "$1"
	ffmpeg -i "${VOICE_FILE}.wav" "${VOICE_FILE}.ogg" > /dev/null 2>&1
	curl $CURL_ARGS -X POST "${URL}/sendVoice?chat_id=$(CHAT_ID)&" -F "voice=@${VOICE_FILE}.ogg" # 2>&1 > /dev/null
	[[ $(uname -n) == "orangepizero" ]] && mv "${VOICE_FILE}.wav" "$DEST" > /dev/null 2>&1
	rm -f "${VOICE_FILE}.wav"
	rm "${VOICE_FILE}.ogg"
}

function send_Tphoto(){
	local PHOTO="$1"
	send_Tchat_action $(CHAT_ID) "upload_photo"
	curl $CURL_ARGS -X POST "${URL}/sendPhoto?chat_id=$(CHAT_ID)&" -F "photo=@${PHOTO}" # 2>&1 > /dev/null
}

function send_Tdoc(){
	local path_to_file="$1"
	send_Tchat_action "$(CHAT_ID)" "upload_document"
	curl $CURL_ARGS -X POST \
		--url "${URL}/sendDocument?" \
		--form chat_id="$(CHAT_ID)" \
		--form "document=@${path_to_file}" # 2>&1 > /dev/null
}

function file_size() {
	path_to_file="$1"
	stat --printf="%s" "$path_to_file"
}

#function get_Updates(){
	#echo "$(curl $CURL_ARGS -X GET "${URL}/getUpdates" )"
#}

function get_Tlast_message(){
	local LAST_MESSAGE_ID CURL_opt
	LAST_MESSAGE_ID="$(cat "${LMidFILE}")"
	CURL_opt="-s --max-time 10 --output $RAM_JSON -X GET ${URL}/getUpdates?"
	[[ "$TOR_EN" == "true" ]] && CURL_opt+=" --proxy socks4://127.0.0.1:9050"
	# Based on this text from page https://core.telegram.org/bots/api
	# The update‘s unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you’re using Webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
	if [[ "$(date +%s)" -le "$(($(cat $LMdateFILE)+518400))" ]]; then # from last message plus 6 full days (6×24×60×60)
		curl $CURL_opt -d offset="${LAST_MESSAGE_ID}" -d limit=1 2> /dev/null
	else
		curl $CURL_opt -d limit=1 2> /dev/null
	fi
	[[ MESS_DATE != 'null' && -n MESS_DATE ]] && MESS_DATE > "$LMdateFILE"
}

function send_Tchat_action() {
	[ "$2" = "" ] && return
	# variants are :
	# "typing" for text messages
	# "upload_photo" for photos
	# "record_video" or "upload_video" for videos
	# "record_audio" or "upload_audio" for audio files
	# "upload_document" for general files
	# "find_location" for location data,
	# "record_video_note" or "upload_video_note" for video notes
	curl -s -X POST "${URL}/sendChatAction?" -d chat_id="${1}" -d action="$2"
}

function send_Tmess_buttons(){
	[ "$1" = "" ] && return
	[ "$2" = "" ] && return
	local MESSAGE
	MESSAGE="$(cat "$1")"
	local CUSTOM_BUTTONS="${2}" # [[\"option1\",\"op3\"],[\"option2\",\"op4\"]]
	curl $CURL_ARGS --request POST \
	    --url "${URL}/sendMessage?" \
	    --header 'content-type: multipart/form-data' \
	    --form chat_id="$(CHAT_ID)" \
	    --form text="${MESSAGE}" \
	    --form reply_markup="{\"keyboard\":${CUSTOM_BUTTONS},\"one_time_keyboard\":true}"
	log "[STAT] send message with exit status ${?}"
	log "	${MESSAGE}"
}

function send_Tmess_1button() {
	[ "$1" = "" ] && return
	local MESSAGE
	MESSAGE="$(cat "$1")"
	local CUSTOM_BUTTON="${2}"
	curl $CURL_ARGS --request POST \
		--url "${URL}/sendMessage?" \
		--header 'content-type: multipart/form-data' \
		--form chat_id="$(CHAT_ID)" \
		--form text="${MESSAGE}" \
		--form reply_markup="{\"keyboard\":${CUSTOM_BUTTON},\"one_time_keyboard\":true}"
		log "[STAT] send message with exit status ${?}"
		log "	${MESSAGE}"
}

function debug_info() {
	local COLUMNSasd=$(tput cols)
	local SYMBOL_start='★' #'⛹' #⛟⛹⚽★
	local SYMBOL_end='⚽' #'⛹' #⛟⛹⚽★
	i=0
# START
	for (( i = 0; i < COLUMNSasd; i++ )); do
		echo -en "$SYMBOL_start"
	done

	echo -e "\n⛟⛟⛟\t[$(date +%s)] [$(date +"%F %T")]\tGet updade from server"
		cat $RAM_JSON | jq
	echo -e "\n⛟⛟⛟\t[$(date +%s)] [$(date +"%F %T")]\tServer feedback on answer"
		cat $SFB_JSON | jq
	echo -e "\n⛟⛟⛟\t[$(date +%s)] [$(date +"%F %T")]\tsignal to die $(cat $SIG_to_DIE)"
	echo -e "\n⛟⛟⛟\t[$(date +%s)] [$(date +"%F %T")]\tlast message id = $(cat $LMidFILE)"

# END
	for (( i = 0; i < COLUMNSasd; i++ )); do
		echo -en "$SYMBOL_end"
	done
}

function tor_newnym() {
	#cmd="signal NEWNYM" && ( echo "$cmd" && sleep 1 ) | socat - UNIX-CONNECT:/var/run/tor/control
	cmd=$(echo -en "AUTHENTICATE \"password\"\nsignal newnym\nquit\n" | nc 127.0.0.1 9051)
}
